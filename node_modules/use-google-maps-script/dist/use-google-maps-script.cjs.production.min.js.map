{"version":3,"file":"use-google-maps-script.cjs.production.min.js","sources":["../src/index.ts","../src/utils/isBrowser.ts","../src/utils/isbrowser.ts","../src/utils/createUrl.ts","../src/utils/injectScript.ts"],"sourcesContent":["import { useRef, useEffect, useState } from 'react';\nimport invariant from 'invariant';\n\nimport { isBrowser } from './utils/isBrowser';\nimport { injectScript } from './utils/injectScript';\nimport { makeLoadScriptUrl, LoadScriptUrlOptions } from './utils/createUrl';\n\nexport { Libraries } from './utils/createUrl';\n\nexport interface UseLoadScriptOptions extends LoadScriptUrlOptions {\n  id?: string;\n  nonce?: string;\n}\n\nconst defaultLoadScriptProps = {\n  id: 'script-loader',\n  version: 'weekly',\n};\n\nlet previouslyLoadedUrl: string;\n\nexport function useGoogleMapsScript({\n  id = defaultLoadScriptProps.id,\n  version = defaultLoadScriptProps.version,\n  nonce,\n  googleMapsApiKey,\n  googleMapsClientId,\n  language,\n  region,\n  libraries,\n  channel,\n  mapIds,\n}: UseLoadScriptOptions): {\n  isLoaded: boolean;\n  loadError: Error | undefined;\n  url: string;\n} {\n  const isMounted = useRef(false);\n  const [isLoaded, setLoaded] = useState(false);\n  const [loadError, setLoadError] = useState<Error | undefined>(undefined);\n\n  useEffect(function trackMountedState() {\n    isMounted.current = true;\n    return (): void => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  useEffect(\n    function validateLoadedState() {\n      if (isLoaded) {\n        invariant(\n          !!window.google,\n          'useLoadScript was marked as loaded, but window.google is not present. Something went wrong.'\n        );\n      }\n    },\n    [isLoaded]\n  );\n\n  const url = makeLoadScriptUrl({\n    version,\n    googleMapsApiKey,\n    googleMapsClientId,\n    language,\n    region,\n    libraries,\n    channel,\n    mapIds,\n  });\n\n  useEffect(\n    function loadScriptAndModifyLoadedState() {\n      if (!isBrowser) {\n        return;\n      }\n\n      function setLoadedIfMounted(): void {\n        if (isMounted.current) {\n          setLoaded(true);\n          previouslyLoadedUrl = url;\n        }\n      }\n\n      if (window.google && window.google.maps && previouslyLoadedUrl === url) {\n        setLoadedIfMounted();\n        return;\n      }\n\n      injectScript({ id, url, nonce })\n        .then(setLoadedIfMounted)\n        .catch(function handleInjectError(err) {\n          if (isMounted.current) {\n            setLoadError(err);\n          }\n          console.warn(`\n        There has been an Error with loading Google Maps API script, please check that you provided correct google API key (${googleMapsApiKey ||\n          '-'}) or Client ID (${googleMapsClientId || '-'})\n        Otherwise it is a Network issue.\n      `);\n          console.error(err);\n        });\n    },\n    [id, url, nonce]\n  );\n\n  const prevLibraries = useRef<undefined | string[]>();\n\n  useEffect(\n    function checkPerformance() {\n      if (prevLibraries.current && libraries !== prevLibraries.current) {\n        console.warn(\n          'Performance warning! LoadScript has been reloaded unintentionally! You should not pass `libraries` prop as new array. Please keep an array of libraries as static class property for Components and PureComponents, or just a const variable outside of component, or somewhere in config files or ENV variables'\n        );\n      }\n      prevLibraries.current = libraries;\n    },\n    [libraries]\n  );\n\n  return { isLoaded, loadError, url };\n}\n","export const isBrowser: boolean = typeof document !== 'undefined';\n","export const isBrowser: boolean = typeof document !== 'undefined';\n","import invariant from 'invariant';\n\nexport type Libraries = (\n  | 'drawing'\n  | 'geometry'\n  | 'localContext'\n  | 'places'\n  | 'visualization'\n)[];\n\nexport interface LoadScriptUrlOptions {\n  googleMapsApiKey: string | '';\n  googleMapsClientId?: string;\n  version?: string;\n  language?: string;\n  region?: string;\n  libraries?: Libraries;\n  channel?: string;\n  mapIds?: string[];\n}\n\nexport function makeLoadScriptUrl({\n  googleMapsApiKey,\n  googleMapsClientId,\n  version = 'weekly',\n  language,\n  region,\n  libraries,\n  channel,\n  mapIds,\n}: LoadScriptUrlOptions): string {\n  const params = [];\n\n  invariant(\n    (googleMapsApiKey && googleMapsClientId) ||\n      !(googleMapsApiKey && googleMapsClientId),\n    'You need to specify either googleMapsApiKey or googleMapsClientId for @react-google-maps/api load script to work. You cannot use both at the same time.'\n  );\n\n  if (googleMapsApiKey) {\n    params.push(`key=${googleMapsApiKey}`);\n  } else if (googleMapsClientId) {\n    params.push(`client=${googleMapsClientId}`);\n  }\n\n  if (version) {\n    params.push(`v=${version}`);\n  }\n\n  if (language) {\n    params.push(`language=${language}`);\n  }\n\n  if (region) {\n    params.push(`region=${region}`);\n  }\n\n  if (libraries && libraries.length) {\n    params.push(`libraries=${libraries.sort().join(',')}`);\n  }\n\n  if (channel) {\n    params.push(`channel=${channel}`);\n  }\n\n  if (mapIds && mapIds.length) {\n    params.push(`map_ids=${mapIds.join(',')}`);\n  }\n\n  params.push('callback=initMap');\n\n  return `https://maps.googleapis.com/maps/api/js?${params.join('&')}`;\n}\n","import { isBrowser } from './isbrowser';\n\ninterface WindowWithGoogleMap extends Window {\n  initMap?: () => void;\n}\n\ninterface InjectScriptArg {\n  url: string;\n  id: string;\n  nonce?: string;\n}\n\nexport const injectScript = ({\n  url,\n  id,\n  nonce,\n}: InjectScriptArg): Promise<any> => {\n  if (!isBrowser) {\n    return Promise.reject(new Error('document is undefined'));\n  }\n\n  return new Promise(function injectScriptCallback(resolve, reject) {\n    const existingScript = document.getElementById(id) as\n      | HTMLScriptElement\n      | undefined;\n    const windowWithGoogleMap: WindowWithGoogleMap = window;\n    if (existingScript) {\n      // Same script id/url: keep same script\n      const dataStateAttribute = existingScript.getAttribute('data-state');\n      if (existingScript.src === url && dataStateAttribute !== 'error') {\n        if (dataStateAttribute === 'ready') {\n          return resolve(id);\n        } else {\n          const originalInitMap = windowWithGoogleMap.initMap;\n          const originalErrorCallback = existingScript.onerror;\n\n          windowWithGoogleMap.initMap = function initMap(): void {\n            if (originalInitMap) {\n              originalInitMap();\n            }\n            resolve(id);\n          };\n\n          existingScript.onerror = function(err): void {\n            if (originalErrorCallback) {\n              originalErrorCallback(err);\n            }\n            reject(err);\n          };\n\n          return;\n        }\n      }\n      // Same script id, but either\n      // 1. requested URL is different\n      // 2. script failed to load\n      else {\n        existingScript.remove();\n      }\n    }\n\n    const script = document.createElement('script');\n\n    script.type = 'text/javascript';\n    script.src = url;\n    script.id = id;\n    script.async = true;\n    script.nonce = nonce;\n    script.onerror = function onerror(err): void {\n      script.setAttribute('data-state', 'error');\n      reject(err);\n    };\n\n    windowWithGoogleMap.initMap = function onload(): void {\n      script.setAttribute('data-state', 'ready');\n      resolve(id);\n    };\n\n    document.head.appendChild(script);\n  }).catch(err => {\n    console.error('injectScript error: ', err);\n    throw err;\n  });\n};\n"],"names":["previouslyLoadedUrl","isBrowser","document","id","version","nonce","googleMapsApiKey","googleMapsClientId","language","region","libraries","channel","mapIds","isMounted","useRef","useState","isLoaded","setLoaded","undefined","loadError","setLoadError","useEffect","current","window","google","invariant","url","params","push","length","sort","join","makeLoadScriptUrl","setLoadedIfMounted","maps","Promise","resolve","reject","existingScript","getElementById","windowWithGoogleMap","dataStateAttribute","getAttribute","src","originalInitMap","initMap","originalErrorCallback","onerror","err","remove","script","createElement","type","async","setAttribute","head","appendChild","console","error","Error","injectScript","then","warn","prevLibraries"],"mappings":"0EAmBIA,+FCnBSC,EAAyC,oBAAbC,SCA5BD,EAAyC,oBAAbC,yDFsBvCC,GAAAA,aAPI,sBAQJC,QAAAA,aAPS,WAQTC,IAAAA,MACAC,IAAAA,iBACAC,IAAAA,mBACAC,IAAAA,SACAC,IAAAA,OACAC,IAAAA,UACAC,IAAAA,QACAC,IAAAA,OAMMC,EAAYC,UAAO,KACKC,YAAS,GAAhCC,OAAUC,SACiBF,gBAA4BG,GAAvDC,OAAWC,OAElBC,aAAU,kBACRR,EAAUS,SAAU,EACb,WACLT,EAAUS,SAAU,KAErB,IAEHD,aACE,WACML,IAEEO,OAAOC,QADXC,SAMJ,CAACT,QAGGU,kBGtCNpB,IAAAA,iBACAC,IAAAA,uBACAH,QAAAA,aAAU,WACVI,IAAAA,SACAC,IAAAA,OACAC,IAAAA,UACAC,IAAAA,QACAC,IAAAA,OAEMe,EAAS,UAGZrB,GAAoBC,IACjBD,IAAoBC,GAF1BkB,MAMInB,EACFqB,EAAOC,YAAYtB,GACVC,GACToB,EAAOC,eAAerB,GAGpBH,GACFuB,EAAOC,UAAUxB,GAGfI,GACFmB,EAAOC,iBAAiBpB,GAGtBC,GACFkB,EAAOC,eAAenB,GAGpBC,GAAaA,EAAUmB,QACzBF,EAAOC,kBAAkBlB,EAAUoB,OAAOC,KAAK,MAG7CpB,GACFgB,EAAOC,gBAAgBjB,GAGrBC,GAAUA,EAAOiB,QACnBF,EAAOC,gBAAgBhB,EAAOmB,KAAK,MAGrCJ,EAAOC,KAAK,+DAEsCD,EAAOI,KAAK,KHXlDC,CAAkB,CAC5B5B,QAAAA,EACAE,iBAAAA,EACAC,mBAAAA,EACAC,SAAAA,EACAC,OAAAA,EACAC,UAAAA,EACAC,QAAAA,EACAC,OAAAA,IAGFS,aACE,oBAKWY,IACHpB,EAAUS,UACZL,GAAU,GACVjB,EAAsB0B,GAPrBzB,IAWDsB,OAAOC,QAAUD,OAAOC,OAAOU,MAAQlC,IAAwB0B,EACjEO,IIzEoB,gBAC1BP,IAAAA,IACAvB,IAAAA,GACAE,IAAAA,aAEKJ,EAIE,IAAIkC,SAAQ,SAA8BC,EAASC,OAClDC,EAAiBpC,SAASqC,eAAepC,GAGzCqC,EAA2CjB,UAC7Ce,EAAgB,KAEZG,EAAqBH,EAAeI,aAAa,iBACnDJ,EAAeK,MAAQjB,GAA8B,UAAvBe,EAAgC,IACrC,UAAvBA,SACKL,EAAQjC,OAETyC,EAAkBJ,EAAoBK,QACtCC,EAAwBR,EAAeS,eAE7CP,EAAoBK,QAAU,WACxBD,GACFA,IAEFR,EAAQjC,SAGVmC,EAAeS,QAAU,SAASC,GAC5BF,GACFA,EAAsBE,GAExBX,EAAOW,KAUXV,EAAeW,aAIbC,EAAShD,SAASiD,cAAc,UAEtCD,EAAOE,KAAO,kBACdF,EAAOP,IAAMjB,EACbwB,EAAO/C,GAAKA,EACZ+C,EAAOG,OAAQ,EACfH,EAAO7C,MAAQA,EACf6C,EAAOH,QAAU,SAAiBC,GAChCE,EAAOI,aAAa,aAAc,SAClCjB,EAAOW,IAGTR,EAAoBK,QAAU,WAC5BK,EAAOI,aAAa,aAAc,SAClClB,EAAQjC,IAGVD,SAASqD,KAAKC,YAAYN,aACnB,SAAAF,SACPS,QAAQC,MAAM,uBAAwBV,GAChCA,KA/DCb,QAAQE,OAAO,IAAIsB,MAAM,0BJuE9BC,CAAa,CAAEzD,GAAAA,EAAIuB,IAAAA,EAAKrB,MAAAA,IACrBwD,KAAK5B,UACC,SAA2Be,GAC5BnC,EAAUS,SACZF,EAAa4B,GAEfS,QAAQK,uIAC4GxD,GACpH,yBAAsBC,GAAsB,4DAG5CkD,QAAQC,MAAMV,SAGpB,CAAC7C,EAAIuB,EAAKrB,QAGN0D,EAAgBjD,kBAEtBO,aACE,WACM0C,EAAczC,SAAWZ,IAAcqD,EAAczC,SACvDmC,QAAQK,KACN,oTAGJC,EAAczC,QAAUZ,IAE1B,CAACA,IAGI,CAAEM,SAAAA,EAAUG,UAAAA,EAAWO,IAAAA"}